from itertools import product

from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart

from aiogram.utils.keyboard import InlineKeyboardBuilder, KeyboardButton, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton
from pyexpat.errors import messages

import keyboards.keyboards as kb
import database.query_postgresql as rq

router = Router()

from dotenv import load_dotenv
import os

load_dotenv()


bot = Bot(token=os.environ.get("BOT_TOKEN"))


@router.message(CommandStart())
async def cmd_start(message: Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    await rq.add_user(message.from_user.id, first_name, last_name)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤!', reply_markup=kb.main)
    # await message.answer_photo('AgACAgQAAxkDAAIIBmbTJM-gFaZ4rETI_X_-ZV_lDnAbAALNtDEbIbJ1UkhHmD2CuCVWAQADAgADdwADNQQ')


@router.message(F.text == 'üíê –ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.categories())


@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    category_id = callback.data.split('_')[1]
    products = await rq.get_category_product(int(category_id))

    for product in products:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        await callback.message.answer_photo(
            photo=product.image,
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–ê—Ä—Ç–∏–∫—É–ª: {product.description}\n–¶–µ–Ω–∞: {product.price} —Ä—É–±.',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_{product.id}')]]
            )
        )

    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    # await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    #                               reply_markup=await kb.products(callback.data.split('_')[1]))

#
# async def category(callback: CallbackQuery):
#     category_id = callback.data.split('_')[1]
#     products = await rq.get_category_product(int(category_id))
#
#     for product in products:
#         # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ product.image_urls —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏
#         image_urls = product.image_urls.split(', ')
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#         await callback.message.answer_photo(
#             photo=image_urls[0],
#             caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}$',
#             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'prev_{product.id}_0'),
#                  InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data=f'next_{product.id}_0')],
#                 [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_{product.id}')]]
#             )
#         )
#
#     await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

# @router.callback_query_handler(lambda c: c.data.startswith('prev_') or c.data.startswith('next_'))
# async def navigate_images(callback: CallbackQuery):
#     action, product_id, current_index = callback.data.split('_')
#     current_index = int(current_index)
#     product = await rq.get_product(int(product_id))  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
#     image_urls = product.image_urls.split(', ')
#
#     if action == 'next':
#         new_index = (current_index + 1) % len(image_urls)
#     else:
#         new_index = (current_index - 1) % len(image_urls)
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏
#     await callback.message.edit_media(
#         media=InputMediaPhoto(media=image_urls[new_index]),
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'prev_{product.id}_{new_index}'),
#              InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data=f'next_{product.id}_{new_index}')],
#             [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_{product.id}')]]
#         )
#     )


# @router.callback_query(F.data.startswith('product_'))
# async def category(callback: CallbackQuery):
#     product_data = await rq.get_product(callback.data.split('_')[1])
#     await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä')
#     await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product_data.description}\n'
#                                   f'–¶–µ–Ω–∞: {product_data.price}$', reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_{product_data.id}')]]))


@router.callback_query(F.data.startswith('cart_'))
async def category(callback: CallbackQuery):
    product_data = await rq.get_product(callback.data.split('_')[1])
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product_data.name}')
    await callback.message.answer(f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {product_data.name}')
    product_id = int(f'{product_data.id}')
    user_id = callback.from_user.id
    quantity = 1
    await rq.add_cart(user_id, product_id, quantity)


@router.message(F.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def echo(message: types.Message):
    user_id = message.from_user.id
    cart_products = await rq.get_cart_user(user_id)

    if cart_products is None or len(cart_products) == 0:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return

    for cart_product in cart_products:
        product_id = cart_product.product_id
        cart_product_quantity = await rq.get_cart_product_user(user_id, product_id)
        product = await rq.get_product(product_id)
        category_name = await rq.get_category_name(product.category_id)
        await message.answer_photo(photo=product.image,
                            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–¶–µ–Ω–∞: {product.price}\n'
                                    f'–ö–æ–ª-–≤–æ: {cart_product_quantity.quantity} —à—Ç.',
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                             callback_data=f'delete_{cart_product.id}')]]))



@router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: CallbackQuery):
    cart_id = int(callback.data.split('_')[1])
    user_id = int(callback.from_user.id)

    product_id = await rq.get_cart_id_user(cart_id=cart_id, user_id=user_id)

    # await callback.message.answer (text=f'–ò–î —Ç–æ–≤–∞—Ä–∞ {product_id.product_id}')

    product_name = await rq.get_product(product_id.product_id)

    await rq.delete_cart_product(pr_id=cart_id)

    await callback.answer(f'–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä: {product_name.name}')
    await callback.message.answer(f'–í—ã —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {product_name.name}')




@router.message(F.text == '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: types.Message):
    await message.answer(
        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: 8 (495) 121-24-30\n'
        f'üïì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞: —Å 8:00 –¥–æ 21:00\n'
        f'üö© –ê–¥—Ä–µ—Å —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞: –°–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    await message.answer_location(latitude=59.9343, longitude=30.3198)